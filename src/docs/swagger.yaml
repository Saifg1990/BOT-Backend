openapi: 3.0.0
info:
  title: Chat AI API Documentation
  version: 1.0.0
  description: |
    API documentation for the Chat AI service with real-time communication capabilities.
    
    Features:
    - Authentication and user management
    - Real-time chat with AI
    - Audio message support
    - Bot customization
    - WebSocket integration

servers:
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        ulid:
          type: string
          description: Universally Unique Lexicographically Sortable Identifier
        apiKey:
          type: string
          description: API key for external integrations
        apiSecret:
          type: string
          description: API secret for external integrations
        ipAddress:
          type: string
          description: User's IP address

    Bot:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the bot
        company_name:
          type: string
          description: Company name associated with the bot
        company_logo:
          type: string
          description: URL to company logo
        company_website:
          type: string
          format: uri
          description: Company website URL
        company_information_doc:
          type: string
          description: Path to company information document
        company_extra_informations:
          type: string
          description: Additional company information
        background_color:
          type: string
          description: Background color for chat interface
        primary_color:
          type: string
          description: Primary color for chat interface
        secondary_color:
          type: string
          description: Secondary color for chat interface
        third_color:
          type: string
          description: Tertiary color for chat interface
        bot_name:
          type: string
          description: Name of the bot
        bot_avatar:
          type: string
          description: URL to bot avatar
        bot_language:
          type: string
          description: Primary language for bot responses
        bot_greeting_message:
          type: string
          description: Initial greeting message
        userId:
          type: integer
          description: Associated user ID

    Chat:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the chat
        ulid:
          type: string
          description: Universally Unique Lexicographically Sortable Identifier
        userId:
          type: integer
          description: Associated user ID
        botId:
          type: integer
          description: Associated bot ID

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Error message
            type:
              type: string
              description: Error type
            fields:
              type: object
              description: Validation errors by field


paths:
  /api/chat/text:
    post:
      tags:
        - Chat
      summary: Send text message to AI
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Text message to send
              required:
                - message
      responses:
        '200':
          description: Message sent successfully
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: [text, audio, transcription, complete]
                  content:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/chat/audio:
    post:
      tags:
        - Chat
      summary: Send audio message to AI
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file (WAV format)
      responses:
        '200':
          description: Audio processed successfully
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    enum: [text, audio, transcription, complete]
                  content:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/auth/init:
    post:
      tags:
        - Authentication
      summary: Initialize chat session
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                business:
                  type: string
                  description: User ULID
              required:
                - business
      responses:
        '200':
          description: Chat session initialized successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  expires_in:
                    type: integer
                  chat:
                    $ref: '#/components/schemas/Chat'
                  bot:
                    $ref: '#/components/schemas/Bot'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's full name
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password (min 8 characters)
                passwordConfirmation:
                  type: string
                  description: Password confirmation
              required:
                - name
                - email
                - password
                - passwordConfirmation
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                password:
                  type: string
                  format: password
                  description: User's password
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: object
                    properties:
                      access_token:
                        type: string
                      token_type:
                        type: string
                      expires_in:
                        type: integer
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/bot-settings:
    get:
      tags:
        - Bot Settings
      summary: Get bot settings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Bot settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Bot not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Bot Settings
      summary: Update bot settings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                company_name:
                  type: string
                company_logo:
                  type: string
                company_website:
                  type: string
                  format: uri
                company_information_doc:
                  type: string
                company_extra_informations:
                  type: string
                background_color:
                  type: string
                primary_color:
                  type: string
                secondary_color:
                  type: string
                third_color:
                  type: string
                bot_name:
                  type: string
                bot_avatar:
                  type: string
                bot_language:
                  type: string
                bot_greeting_message:
                  type: string
                ip_address:
                  type: string
                  format: ipv4
              required:
                - company_name
                - company_logo
                - company_website
                - company_information_doc
                - company_extra_informations
                - background_color
                - primary_color
                - bot_name
                - bot_avatar
                - bot_language
                - bot_greeting_message
                - ip_address
      responses:
        '200':
          description: Bot settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /health:
    get:
      tags:
        - System
      summary: Health check endpoint
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]


tags:
  - name: Authentication
    description: User authentication and management
  - name: Chat
    description: Real-time chat with AI
  - name: Bot Settings
    description: Bot configuration and customization
  - name: System
    description: System-related endpoints